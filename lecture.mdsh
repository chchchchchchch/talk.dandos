% INTRODUCTION

To start: My name is Christoph Haag.
I grew up in a small pre-alpine village.
I studied at the KHM/Department of Hybrid Space.
I have no background in computer science at all. 

My first experience with code to create something visual
was through making HTML pages. WYSIWYG editors[^]{in my case
MicrosoftTM FrontpageTM on Windows NT} where quite bad at this time.
So even for somebody having no clue
opening your HTML page in a text editor and edit
the source code manually was a valuable alternative.
There were a lot of resources to learn about the basics,
the rest could come 'learning by doing'.

Through HTML I also experienced a specific culture for the first time.
With HTML the source code always was just one mouseclick away.
Rightclick -> 'Quelltext anzeigen' and see how things work.
Consequently my first annoying encounter with proprietary
mentality was Macromedia Flash. While being a quite inspirational application
to create graphics for the web it also introduced
'locking things up' in an environment were the availabilty of
source code was formerly a standard.

Fast forward. Around 2006, I got introduced to GNU/Linux and
'Unix Culture' and that's were my interest in tinkering and code
expanded.

I had a quite rough initiation to GNU/Linux by renting
our own webserver in a 'Rechenzentrum'. I got talked into
this by a colleague and as I was not in general against the idea
of self-empowerment we just did it. I barely touched
free software before, but my colleague insisted that he'd know
what he is doing.[^]{Today I've serious doubts about that}
Anyway we now had a computer at some remote location,
accessible only over terminal and making fundamental mistakes
meant to call someone in the 'Rechenzentrum' and ask them to
reboot your machine. In retrospect this harsh take-off also had
the effect that I grew into different expectations (and maybe different dissapointments).
Different than what seems obvious if you install a GNU/Linux Distribution as
a replacement for Mac OSX and want it to 'just work alike'.

My second introduction came from another direction and was 
a less harsh but at least as 'prägend'.
At the audio department of the Kunsthochschule für Medien Köln Martin Rumori
had set up a series of 'angebote' around the culture and
cult of Unix and GNU/Linux and free software in general.
It is within this context where my first major project
in the field of f/l/os graphic design came into being.



In 2007 I created the 'key visual' for the _Linux Audio Conference_,
a annual conference of Linux Audio Developers, that was hosted at the
KHM in early 2008.
The 'key visual' was a hyperconnective machine/instrument/environment,
which was very much inspired by the idea that within Linux culture 
users are encouraged to think and make their own applications.

% ... (Cramer Quote, LISL)

Wether or not this seems to make sense, or maybe even better if not.

% 'prevent users from doing ...'

Graphics were automatically generated from a pool of modular
illustrations producing not one image, but a endless number
of variations, approaching the diversity made possible through
modular systems.

The following years brought more graphic design projects all
more or less connected through the same idea:

_design rules to design posters
 instead of
 design posters_

% MAKE ART
% LAC 2009

These projects were all closely connected to f/l/os culture:

1. made for f/l/os projects
2. using f/l/os software
3. being f/l/os themselves


% PERSONAL SOFTWARE

While published under f/l/os licenses I actually never expected
anyone to reuse these projects 'as is'. Why? The software within 
these projects is very specific. Although the source code is
available, it is nothing to just download, install and run.
As far as I know. It is not written for some generic use and user,
but for a very specific. In this way it is really _personal software_.

It was never my ambition to develop general-purpose
software.  While I was interested in creating processes and infrastructures
as part of my work, I was not really interested to make tools for a generic set of "users".
The intention was to have an example, that helps to imagine what
could be possible. Make and experience and
show interesting possibilities beside the mononculture we became
used to when it comes to digital design tools.


% TOWARDS SITUATED SOFTWARES

2012 I worked on a project for the Libre Graphics Meeting 2013
at Medialab Prado. The brief was to create a visual identity for
the meeting, which would reflect and capture voices of the community.
We developed a simple interface, where people could ask or answer questions.
These conversations were collected and used to generate posters.



In 2014 I started together with Constant from Brussels to work on 
the book "The best, biggest ...". The book collects interviews made by Constant,
over a period of 10 years, all connected to the subject of Libre Graphics. 
For the book we had the ambition
to create a setup that would work different from the workflows we were used to.
This means different from a standard editorial process, were design has to happen
after everything else
is finished.
The content is edited collaboratively online, written as a lightweight
markup language. Content is pulled into a 'local software setup'
where a pdf file (ready to print) is generated. The 'local setup'
could be installed on any standard GNU/Linux computer (even OSX worked).

Contributing to the editing was as easy as opening a website and
also the installation of the software was feasible. I must admit
that in the end I was quite happy with the setup, that allowed
contributions through a lot of different layers and complexities,
from proofreading to replicating the whole infrastructure.

These last 2 projects are different from my earlier work.
They're not completely automated processes anymore,
but they provide some sort of (easy-to-use) interface.
This non-generic, temporary,
maybe over-specific form of interaction is,
for me,
right now,
a very interesting space.



I'd like to show an 'everyday' example of 
'something situated'. It is a markup dialect based on
the widespread standard markdown but allows to extend this standard 
with custom 'instructions'. These 'instructions' are
simple lines of text that perform specific actions
when translating from source code to some other format.

It is situated as it was developed for a specific
group, at a specific time, for a specific task.
The 'instructions' are not predefined but may be
developed on the fly. And it is
situated once more as the definition of 'instructions'
explicitely happen in the local context of the transformer.

% SHOW MDSH FLOWS



'situated software' may be anything from a small
script to rename your files to a collaborative 
writing setup.

'Situated software' explicitely ignores any
ambitions towards universal truth. % 'Anspruch auf Allgemeingültigkeit'
% without slipping into relativity (vgl. Haraway)
And at the same time it amplifies the diversification of tools and practises.
A perspective I find very exciting.


% FINISH

And here we're coming back to f/l/os.

f/l/os has long a tradition and experience to empower
reuse and adaptibility. And not as some cosmetic corrections
but through all layers of complexity, from its interfaces
to its very inner workings. This culture makes it feasible
to even think of making something like 'situated software'.

% vgl. cli,... critical engineering

For me 'doing design' was always closely connected to the
materiality of things and technology. I like the specific
qualities and resistances of different tools and materials.
And this is something I don't want to miss for 'the digital'.









----

EXPLAIN (?)

- HTML
- WYSIWYG
- GNU/Linux
- MARKDOWN
- TERMINAL


-----------------------------


% The option to redefine a piece
% of software is also fundamental to my idea of 'situated
% softwares'. I like the idea of minimal, _situated interfaces_.
% But if the interface is all that is accessible, this
% is not a good idea. 
% 
% There's an important difference
% between hiding and making inaccessible.
% % esr taoup p.151

% situated softwares allows 'bad practises'
% (oversimplification, hardwiring, instability,...)
% and even failure. 
% This is possible as the 'situated software' does 
% neither need to work for everybody and nor
% endure the rest of time.


Software that is structuring a lot of our modern lifes.
At the same time we want software to be invisible, to 'just work'.
I think part of this desire is the sheer complexity ...
So for me it helps to think of making software not as something universal
but as something that can be very personal and situative.
You do not have to write your own version of Photoshop.

% At the same time I adjusted to a procedure
% that is quite common for a lot of digital workflows,
% from writing code to doing animation:
% 
% DO, WAIT, JUDGE. (DO AGAIN.)
% 
% DO: make (or make changes to) something
% WAIT: until the computer processed your input
% JUDGE: see the result
% 
% Getting used to this iterative cycles from very early on,
% is maybe the reason why
% I had lower expectations regarding some kind of _'real-time' WYSIWYG_ experience
% _'Real-time' WYSIWYG_
% in the sense of '_create things (exactly) as they will be_'.
% Thinking about animation, I'm actually quite curious what this could be.

% WHAT IS SOFTWARE
% There is software, we have to deal with software
% on a daily basis (from your washing to ... )
% WHAT EXISTS? /OS++
% FLOSS IS SOFTWARE THAT IS FREE ...
% IT IS AN IMPORTANT RIGHT TO HAVE ACCESS
% TO THE SOFTWARE RUNNING ON THEIR DEVICES
% Tinkering??? Counter Culture
% Design Background?


> [...] situativity theorists suggest
> a model of knowledge and learning
> that requires thinking on the fly
> rather than the storage and retrieval
> of conceptual knowledge.
> [*](http://en.wikipedia.org/wiki/Situated_cognition)



Make infrastructures and interfaces for specific uses
that willently ignore the myriad of things
that might be also interesting.

% I'd consider also writing your own website as a situated practise.
% It is situated in the sense that it deals with our 'situation', ideas and practise
% it allows to develop tools and practise in parallel.
% not fitting thorugh some generic content management system
% Also this sounds a bit anachronistic ...
% Reduction as opportunity.

