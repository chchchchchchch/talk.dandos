

  experimental setups
  in the sense of not knowing
  how and what will work?

  create through connecting.
  temporary architectures.

  NON-UNIVERSAL
  small scale
  specific.


----

SITUATED SOFTWARES
==================

I've been doing Free Software Design Projects
since 2007. HOW? WHY?



Came from diy and alternative copyright practise.
this means: paper, scissors, glue got increasingly
escorted by 'writing code', where 'writing' was more
sort of 'copy,paste,modify'. My first introduction
to write code to create something visual was creating
html pages. With html the source code was always just
one mouseclick away. Rightclick -> 'Quelltext anzeigen'
and see how things work. Consequently my first annoying
experience with a proprietary software was Flash.
While being a quite inspirational application to create
graphics for the internet it also introduced 'locking things up'
in an environment were the availabilty of source code was
formerly a standard.

Around 2007 I got introduced to GNU/Linux and
'Unix Culture' and that's were my interest in
tinkering and code expanded. 

Projects as Amalgam of different f/l/os software
finding alternative ways to what you would normally
realize through 'Desktop Publishing'.


- Generative Graphics
  -------------------

  - LAC 2008
  - make art


  writing software to create graphics
  = make rules to create graphic
    instead of create graphics
  = more or less autonomous processes

%   WHY?
% - To 'Design by Rules' I find interesting
%   in general, since it makes me think about rules.
%  (Karl Gerstner)
% - fascinated by potential surprise, keeps it 
%   interesting for myself.







  SITUATED SOFTWARE
  -----------------

> Situated knowledge is knowledge
> specific to a particular situation
> [*](https://en.wikipedia.org/wiki/Knowledge#Situated_knowledge)

  What could this mean for software?

  = creating (micro-)practises for a specific situation
  = specific software for a specific moment



  PREREQUISITES (pragmatic, what f/l/os got to do with it)
  -------------

  To create software for a specific situtation
  you need to be able to create software.
  
  only through f/l/os this is feasible at all.
  
- adapt existing software
- connect existing software
- redefine existing software

  with f/l/os we have a culture of prototyping,
  adapting and workarounds.

  And it gets even more interesting through open hardware
  and the option to build interfaces, embedded devices, ...




  WHAT I FIND INTERESTING ABOUT THIS
  ----------------------------------

- radical localisation
- challenge assumptions of how things ought to be done
- diversification of practises 
- specific (<-> universal vgl. Aicher)
- infrastructure not as a commodity
- I want to have custom interfaces

- this is an interesting space 
  as it is not yet (completely) occupied
  probably will never be occupied
 (as it is de-standardisation)
- it's hard to substitue something that 'just works'
 (the creative cloud)


- Technology is increasingly invading all areas of our lifes.
- It has never been easier to give form to technology
- Nevertheless we're heading towards homogenization
  facebook, creative cloud, ...

  a problem of (free) software is complexity.
  one idea to deal with this is the simplification
  of its interfaces. While I find a general simplification
  problematic I'm interested in a situated simplification.
  General communication reduced to 'like' (not even 'don't like')
  is not exactly the ideal scenario for me.
  but I CAN imagine situations
  where I want nothing else but a 'YES' and 'NO' button.
  The idea of localisation of software and personalisation
  is not at all any new. It's been there from the very dawn
  of 'Personal Computing' but at the moment 'software as a service'
  and 'cloud computing' is really pushing into the opposite direction. 

  Multiplication of interfaces?


  IN PRACTISE (what is/could this be?)
  -----------

- details from conversations/lgm
- promiscous pipelines











  THE END
  -------

  Embrace particularity!
  Embrace failure!
  Just do it!









